{"version":3,"sources":["ThePokemons.js","SinglePokemon.js","App.js","serviceWorker.js","index.js"],"names":["Button","styled","button","Pokemons","useQuery","gql","loading","error","data","pokemons","map","id","number","name","maxCP","maxHP","image","types","evolutions","key","className","src","result","to","SinglePokemon","match","idToUse","params","console","log","pokemon","client","ApolloClient","uri","App","path","exact","component","Home","ThePokemons","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"85BAOA,IAAMA,EAASC,IAAOC,OAAV,KAmFGC,MAxEf,WAAqB,IAAD,EACeC,YAASC,YAAA,MAAlCC,EADU,EACVA,QAASC,EADC,EACDA,MAAOC,EADN,EACMA,KAwBxB,OAAIF,EAAgB,6CAChBC,EAAc,uDAELC,EAAKC,SAASC,IAAI,YAA6D,IAA1DC,EAAyD,EAAzDA,GAAGC,EAAsD,EAAtDA,OAAOC,EAA+C,EAA/CA,KAAKC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,MAAMC,EAA6B,EAA7BA,MAAMC,EAAuB,EAAvBA,MAGpE,OAH2F,EAAjBC,WAIxE,yBAAKC,IAAKR,EAAIS,UAAU,cACxB,wBAAIA,UAAU,UAAd,SAA8BP,EAA9B,KACA,yBAAKQ,IAAKL,IACV,4BACE,mCAASL,GACT,uCAAaC,GACb,sCAAYE,GACZ,sCAAYC,GACZ,6BACA,sCACCE,EAAMP,IAAI,SAACY,GAAD,OACT,gCAAMA,EAAN,QAIJ,kBAAC,IAAD,CAAMC,GAAE,yBAAoBZ,IAC3B,kBAACX,EAAD,8BAQD,yBAAKmB,IAAKR,EAAIS,UAAU,cACxB,wBAAIA,UAAU,UAAd,SAA8BP,EAA9B,KACA,yBAAKQ,IAAKL,IACV,4BACE,mCAASL,GACT,uCAAaC,GACb,sCAAYE,GACZ,sCAAYC,GACZ,sCAAYE,Q,6WCLHO,MAvEf,SAAuBC,GAGrB,IAAIC,EAAO,UAAMD,EAAMA,MAAME,OAAOhB,IAGnCiB,QAAQC,WAAWH,GANQ,MAOOtB,YAASC,YAAA,IAG1BqB,IAHRpB,EAPkB,EAOlBA,QAASC,EAPS,EAOTA,MAAOC,EAPE,EAOFA,KAwB1B,OAAIF,EAAgB,yCAChBC,EAAc,uCAGZ,yBAAKY,IAAKX,EAAKsB,QAAQnB,GAAIS,UAAU,oBACnC,wBAAIA,UAAU,UAAd,IAAyBZ,EAAKsB,QAAQjB,KAAtC,KACA,yBAAKQ,IAAKb,EAAKsB,QAAQd,QACvB,4BACE,mCAASR,EAAKsB,QAAQnB,IACtB,uCAAaH,EAAKsB,QAAQlB,QAC1B,sCAAYJ,EAAKsB,QAAQhB,OACzB,sCAAYN,EAAKsB,QAAQf,OACzB,sCACCP,EAAKsB,QAAQb,MAAMP,IAAI,SAACY,GAAD,OACtB,gCAAMA,EAAN,SAKJ,wBAAIF,UAAU,cAAd,cAEIZ,EAAKsB,QAAQZ,WAAWR,IAAI,SAACY,GAAD,OACxB,gCAAMA,EAAOT,KAAb,UChDZkB,EAAS,IAAIC,IAAa,CAC9BC,IAAK,+CAKDC,E,iLAEF,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAgBH,OAASA,GACvB,6BACA,kBAAC,IAAD,CAAOI,KAAK,IAAIC,OAAK,EAACC,UAAWC,IACjC,kBAAC,IAAD,CAAOH,KAAM,eAAeE,UAAWE,IACvC,kBAAC,IAAD,CAAOJ,KAAM,qBAAqBE,UAAWb,W,GARrCgB,aAgBZF,EAAO,kBACX,6BACE,kBAAC,IAAD,CAAMf,GAAE,gBACP,wBAAIH,UAAU,eAAd,yBAEC,kBAAC,IAAD,CAAMG,GAAE,gBACV,yBAAKF,IAAI,wDAAwDD,UAAU,WAKhEc,IChCKO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASnB,MACvB,2DCZNoB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.cd4ec42b.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport './index.css';\n\nconst Button = styled.button`\n  background: transparent;\n  border-radius: 6px;\n  border: 2px solid coral;\n  color: coral;\n  margin: 1 1em;\n  margin-top: 12px;\n  padding: 0.50em 1em;\n  font-size: 18px;\n`\n\nfunction Pokemons() {\n  const { loading, error, data } = useQuery(gql`\n    {\n     pokemons(first: 10) {\n       id\n       number\n       name\n       maxCP\n       maxHP\n       image\n       types\n       evolutions {\n         id\n         number\n         name\n         maxCP\n         maxHP\n         image\n         types\n       }\n     }\n    }\n  `);\n\n\n  if (loading) return <p>Almost ready! </p>;\n  if (error) return <p>Something went wrong! :(</p>;\n\nvar toRender = data.pokemons.map(({ id,number,name,maxCP, maxHP,image,types,evolutions }) => {\n\n\n  if (evolutions) return(\n    <div key={id} className=\"pokemonBox\">\n    <h3 className=\"header\"> Meet {name}!</h3>\n    <img src={image} />\n    <ul>\n      <li>ID: {id}</li>\n      <li>Number: {number}</li>\n      <li>MaxCP: {maxCP}</li>\n      <li>MaxHP: {maxHP}</li>\n      <br></br>\n      <ul>Types: {\n       types.map((result) =>(\n        <li> {result} </li>\n      ))\n    }\n    </ul>\n    <Link to={`/SinglePokemon/${id}`}>\n     <Button> More Information </Button>\n    </Link>\n    </ul>\n    </div>\n   )\n\n\n  else return (\n    <div key={id} className=\"pokemonBox\">\n    <h3 className=\"header\"> Meet {name}!</h3>\n    <img src={image} />\n    <ul>\n      <li>ID: {id}</li>\n      <li>Number: {number}</li>\n      <li>MaxCP: {maxCP}</li>\n      <li>MaxHP: {maxHP}</li>\n      <li>Types: {types}</li>\n    </ul>\n    </div>)\n});\n\nreturn toRender;\n\n}\nexport default Pokemons;\n\n\n\n\n/*data.pokemons.map(({ id,number,name,evolutions }) => (\n  if (a ==1){\n    return  <p>Akila</p>;\n  }\n));\n*/\n\n/*\n<div key={id}>\n<p> {name}: {evolutions[0].name} </p>\n</div>\n*/\n\n/*\nreturn data.pokemons.map(({ id,number,name,evolutions }) => (\n  //console.log(evolutions[0].name),\n <div key={id}>\n   <p>\n     {name}: {number}\n   </p>\n </div>\n));\n*/\n","import React, {Component} from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\n/*jshint esversion: 6*/\n\n\nfunction SinglePokemon(match) {\n\n  //`${match.match.params.id}`\n  var idToUse = `${match.match.params.id}`;\n  //`${match.match.params.id}`;\n\n   console.log(typeof idToUse);\n    const { loading, error, data } = useQuery(gql`\n    {\n\n     pokemon(id: \"${idToUse}\") {\n       id\n       number\n       name\n       maxCP\n       maxHP\n       image\n       types\n       evolutions {\n         id\n         number\n         name\n         maxCP\n         maxHP\n         image\n         types\n       }\n     }\n    }\n  `);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n      return(\n        <div key={data.pokemon.id} className=\"pokemonBoxSingle\">\n          <h3 className=\"header\"> {data.pokemon.name}!</h3>\n          <img src={data.pokemon.image} />\n          <ul>\n            <li>ID: {data.pokemon.id}</li>\n            <li>Number: {data.pokemon.number}</li>\n            <li>MaxCP: {data.pokemon.maxCP}</li>\n            <li>MaxHP: {data.pokemon.maxHP}</li>\n            <ul>Types: {\n             data.pokemon.types.map((result) =>(\n              <li> {result} </li>\n            ))\n          }\n          </ul>\n            </ul>\n          <ul className=\"evolutions\">Evolutions:\n            {\n              data.pokemon.evolutions.map((result) =>(\n                  <li> {result.name} </li>\n                ))\n              }\n          </ul>\n         </div>\n       )\n}\n//return toRender;\n//return toRender;\n  /*\nconsole.log(data);\n return (\n   <div>\n  {data.pokemon.name}\n   </div>\n )\n*/\n  //{match.match.params.id}\nexport default SinglePokemon;\n","import React , {Component} from 'react';\nimport ApolloClient from 'apollo-boost';\nimport {ApolloProvider} from 'react-apollo';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport ThePokemons from './ThePokemons';\nimport './App.css';\nimport SinglePokemon from './SinglePokemon';\nimport {Link} from 'react-router-dom';\n\n\n\nconst client = new ApolloClient({\n  uri: 'https://pokemon-samdavies.stylindex.now.sh'\n});\n\n\n\nclass App extends Component{\n    render(){\n    return(\n      <Router>\n        <ApolloProvider client= {client}>\n          <div>\n          <Route path=\"/\" exact component={Home}/>\n          <Route path= \"/ThePokemons\" component={ThePokemons} />\n          <Route path= \"/SinglePokemon/:id\" component={SinglePokemon}/>\n           </div>\n        </ApolloProvider>\n      </Router>\n  )\n  }\n}\n\nconst Home = () => (\n  <div>\n    <Link to={`/ThePokemons`}>\n     <h1 className=\"headerFront\"> Click for Pokemon! </h1>\n    </Link>\n      <Link to={`/ThePokemons`}>\n    <img src=\"https://media.giphy.com/media/yhfTY8JL1wIAE/giphy.gif\" className=\"gif\"/>\n      </Link>\n      </div>\n);\n\nexport default App;\n\n\n\n\n\n\n/*<div className=\"App\">\n  <header className=\"App-header\">\n  <h1 className =\"App-title\">\n  Pokemon\n  </h1>\n  </header>\n  </div>\n  */\n\n/*\nimport React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}